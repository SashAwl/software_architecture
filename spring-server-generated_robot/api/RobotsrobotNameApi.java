/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error;
import io.swagger.model.Robot;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-22T15:17:22.021Z[GMT]")
@Validated
public interface RobotsrobotNameApi {

    @Operation(summary = "Метод удаления устройства по его имени", description = "", tags={ "Robots" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Успешно удалено"),
        
        @ApiResponse(responseCode = "200", description = "Ответ в остальных случаях", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/robots{robot_name}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteRobotByName(@Parameter(in = ParameterIn.PATH, description = "Имя робота", required=true, schema=@Schema()) @PathVariable("robot_name") String robotName);


    @Operation(summary = "Метод получения информации об одном роботе по его имени", description = "", tags={ "Robots" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Успешный ответ с одним роботом", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Robot.class))),
        
        @ApiResponse(responseCode = "200", description = "Ответ в остальных случаях", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))) })
    @RequestMapping(value = "/robots{robot_name}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Robot> getRobotByName(@Parameter(in = ParameterIn.PATH, description = "Имя робота", required=true, schema=@Schema()) @PathVariable("robot_name") String robotName);

}

